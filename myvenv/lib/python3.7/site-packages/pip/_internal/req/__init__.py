<<<<<<< HEAD
# The following comment should be removed at some point in the future.
# mypy: strict-optional=False

=======
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e
from __future__ import absolute_import

import logging

<<<<<<< HEAD
from pip._internal.utils.logging import indent_log
from pip._internal.utils.typing import MYPY_CHECK_RUNNING

from .req_file import parse_requirements
from .req_install import InstallRequirement
from .req_set import RequirementSet

if MYPY_CHECK_RUNNING:
    from typing import Any, List, Sequence
=======
from .req_install import InstallRequirement
from .req_set import RequirementSet
from .req_file import parse_requirements
from pip._internal.utils.logging import indent_log
from pip._internal.utils.typing import MYPY_CHECK_RUNNING

if MYPY_CHECK_RUNNING:
    from typing import List, Sequence  # noqa: F401
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e

__all__ = [
    "RequirementSet", "InstallRequirement",
    "parse_requirements", "install_given_reqs",
]

logger = logging.getLogger(__name__)


<<<<<<< HEAD
class InstallationResult(object):
    def __init__(self, name):
        # type: (str) -> None
        self.name = name

    def __repr__(self):
        # type: () -> str
        return "InstallationResult(name={!r})".format(self.name)


=======
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e
def install_given_reqs(
    to_install,  # type: List[InstallRequirement]
    install_options,  # type: List[str]
    global_options=(),  # type: Sequence[str]
<<<<<<< HEAD
    *args,  # type: Any
    **kwargs  # type: Any
):
    # type: (...) -> List[InstallationResult]
=======
    *args, **kwargs
):
    # type: (...) -> List[InstallRequirement]
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e
    """
    Install everything in the given list.

    (to be called after having downloaded and unpacked the packages)
    """

    if to_install:
        logger.info(
            'Installing collected packages: %s',
            ', '.join([req.name for req in to_install]),
        )

<<<<<<< HEAD
    installed = []

    with indent_log():
        for requirement in to_install:
            if requirement.should_reinstall:
                logger.info('Attempting uninstall: %s', requirement.name)
=======
    with indent_log():
        for requirement in to_install:
            if requirement.conflicts_with:
                logger.info(
                    'Found existing installation: %s',
                    requirement.conflicts_with,
                )
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e
                with indent_log():
                    uninstalled_pathset = requirement.uninstall(
                        auto_confirm=True
                    )
            try:
                requirement.install(
                    install_options,
                    global_options,
                    *args,
                    **kwargs
                )
            except Exception:
                should_rollback = (
<<<<<<< HEAD
                    requirement.should_reinstall and
=======
                    requirement.conflicts_with and
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e
                    not requirement.install_succeeded
                )
                # if install did not succeed, rollback previous uninstall
                if should_rollback:
                    uninstalled_pathset.rollback()
                raise
            else:
                should_commit = (
<<<<<<< HEAD
                    requirement.should_reinstall and
=======
                    requirement.conflicts_with and
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e
                    requirement.install_succeeded
                )
                if should_commit:
                    uninstalled_pathset.commit()
<<<<<<< HEAD

            installed.append(InstallationResult(requirement.name))

    return installed
=======
            requirement.remove_temporary_source()

    return to_install
>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e
